package com.example.daidaijie.syllabusapplication.todo.dataTemp;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.daidaijie.syllabusapplication.syllabus.LessonEvaluation.local.EvalBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EVAL_BEAN".
*/
public class EvalBeanDao extends AbstractDao<EvalBean, Long> {

    public static final String TABLENAME = "EVAL_BEAN";

    /**
     * Properties of entity EvalBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Eva_id = new Property(1, int.class, "eva_id", false, "EVA_ID");
        public final static Property Class_id = new Property(2, int.class, "class_id", false, "CLASS_ID");
        public final static Property Teacher_id = new Property(3, int.class, "teacher_id", false, "TEACHER_ID");
        public final static Property Cid = new Property(4, int.class, "cid", false, "CID");
        public final static Property Eva_content = new Property(5, String.class, "eva_content", false, "EVA_CONTENT");
        public final static Property Eva_tags = new Property(6, String.class, "eva_tags", false, "EVA_TAGS");
        public final static Property Eva_score = new Property(7, int.class, "eva_score", false, "EVA_SCORE");
        public final static Property Eva_status = new Property(8, boolean.class, "eva_status", false, "EVA_STATUS");
        public final static Property Eva_time = new Property(9, String.class, "eva_time", false, "EVA_TIME");
        public final static Property Eva_years_semester = new Property(10, String.class, "eva_years_semester", false, "EVA_YEARS_SEMESTER");
    };


    public EvalBeanDao(DaoConfig config) {
        super(config);
    }
    
    public EvalBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EVAL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EVA_ID\" INTEGER NOT NULL ," + // 1: eva_id
                "\"CLASS_ID\" INTEGER NOT NULL ," + // 2: class_id
                "\"TEACHER_ID\" INTEGER NOT NULL ," + // 3: teacher_id
                "\"CID\" INTEGER NOT NULL ," + // 4: cid
                "\"EVA_CONTENT\" TEXT," + // 5: eva_content
                "\"EVA_TAGS\" TEXT," + // 6: eva_tags
                "\"EVA_SCORE\" INTEGER NOT NULL ," + // 7: eva_score
                "\"EVA_STATUS\" INTEGER NOT NULL ," + // 8: eva_status
                "\"EVA_TIME\" TEXT," + // 9: eva_time
                "\"EVA_YEARS_SEMESTER\" TEXT);"); // 10: eva_years_semester
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EVAL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EvalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEva_id());
        stmt.bindLong(3, entity.getClass_id());
        stmt.bindLong(4, entity.getTeacher_id());
        stmt.bindLong(5, entity.getCid());
 
        String eva_content = entity.getEva_content();
        if (eva_content != null) {
            stmt.bindString(6, eva_content);
        }
 
        String eva_tags = entity.getEva_tags();
        if (eva_tags != null) {
            stmt.bindString(7, eva_tags);
        }
        stmt.bindLong(8, entity.getEva_score());
        stmt.bindLong(9, entity.getEva_status() ? 1L: 0L);
 
        String eva_time = entity.getEva_time();
        if (eva_time != null) {
            stmt.bindString(10, eva_time);
        }
 
        String eva_years_semester = entity.getEva_years_semester();
        if (eva_years_semester != null) {
            stmt.bindString(11, eva_years_semester);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EvalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEva_id());
        stmt.bindLong(3, entity.getClass_id());
        stmt.bindLong(4, entity.getTeacher_id());
        stmt.bindLong(5, entity.getCid());
 
        String eva_content = entity.getEva_content();
        if (eva_content != null) {
            stmt.bindString(6, eva_content);
        }
 
        String eva_tags = entity.getEva_tags();
        if (eva_tags != null) {
            stmt.bindString(7, eva_tags);
        }
        stmt.bindLong(8, entity.getEva_score());
        stmt.bindLong(9, entity.getEva_status() ? 1L: 0L);
 
        String eva_time = entity.getEva_time();
        if (eva_time != null) {
            stmt.bindString(10, eva_time);
        }
 
        String eva_years_semester = entity.getEva_years_semester();
        if (eva_years_semester != null) {
            stmt.bindString(11, eva_years_semester);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EvalBean readEntity(Cursor cursor, int offset) {
        EvalBean entity = new EvalBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // eva_id
            cursor.getInt(offset + 2), // class_id
            cursor.getInt(offset + 3), // teacher_id
            cursor.getInt(offset + 4), // cid
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // eva_content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // eva_tags
            cursor.getInt(offset + 7), // eva_score
            cursor.getShort(offset + 8) != 0, // eva_status
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // eva_time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // eva_years_semester
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EvalBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEva_id(cursor.getInt(offset + 1));
        entity.setClass_id(cursor.getInt(offset + 2));
        entity.setTeacher_id(cursor.getInt(offset + 3));
        entity.setCid(cursor.getInt(offset + 4));
        entity.setEva_content(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEva_tags(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEva_score(cursor.getInt(offset + 7));
        entity.setEva_status(cursor.getShort(offset + 8) != 0);
        entity.setEva_time(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEva_years_semester(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EvalBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EvalBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
